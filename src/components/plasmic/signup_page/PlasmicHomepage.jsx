/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4m86kbD6AUvWoLg9z6nLoy
// Component: Q7jAPYREB4RO
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 4m86kbD6AUvWoLg9z6nLoy/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Q7jAPYREB4RO/css
import IconCloseIcon from "./icons/PlasmicIcon__IconClose"; // plasmic-import: DjcSpmhrNKUI/icon
import IconAddIcon from "./icons/PlasmicIcon__IconAdd"; // plasmic-import: R-BheK2w4l8e/icon
import IconArrowRightIcon from "./icons/PlasmicIcon__IconArrowRight"; // plasmic-import: goSwcDgJaJ9N/icon
import IconArrowRight2Icon from "./icons/PlasmicIcon__IconArrowRight2"; // plasmic-import: W4dmJDFoDr9L/icon

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"signuIn"}
              data-plasmic-override={overrides.signuIn}
              hasGap={true}
              className={classNames(projectcss.all, sty.signuIn)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                hasGap={true}
                className={classNames(projectcss.all, sty.title)}
              >
                <div
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                  className={classNames(projectcss.all, sty.header)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content"}
                    data-plasmic-override={overrides.content}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e1Tz1
                      )}
                    >
                      {"Sign up"}
                    </div>
                    <IconCloseIcon
                      className={classNames(projectcss.all, sty.svg__brnC)}
                      role={"img"}
                    />
                  </Stack__>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h40Zx
                  )}
                >
                  {"Already have an account? Sign in"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame6946"}
                data-plasmic-override={overrides.frame6946}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame6946)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"formInput"}
                  data-plasmic-override={overrides.formInput}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.formInput)}
                >
                  <Reveal
                    data-plasmic-name={"reveal"}
                    data-plasmic-override={overrides.reveal}
                    className={classNames("__wab_instance", sty.reveal)}
                    triggerOnce={true}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"input"}
                      data-plasmic-override={overrides.input}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.input)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"iconInput"}
                        data-plasmic-override={overrides.iconInput}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.iconInput)}
                      >
                        {false ? (
                          <IconAddIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vic83
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          data-plasmic-name={"yourEmail"}
                          data-plasmic-override={overrides.yourEmail}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.yourEmail
                          )}
                        >
                          {"Your full name"}
                        </div>
                      </Stack__>
                      {false ? (
                        <IconArrowRightIcon
                          className={classNames(projectcss.all, sty.svg__chSrW)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                  </Reveal>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"formInput2"}
                  data-plasmic-override={overrides.formInput2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.formInput2)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"input2"}
                    data-plasmic-override={overrides.input2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.input2)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"iconInput2"}
                      data-plasmic-override={overrides.iconInput2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.iconInput2)}
                    >
                      {false ? (
                        <IconAddIcon
                          className={classNames(projectcss.all, sty.svg__ieSO)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"yourEmail2"}
                        data-plasmic-override={overrides.yourEmail2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.yourEmail2
                        )}
                      >
                        {"Your phone number"}
                      </div>
                    </Stack__>
                    {false ? (
                      <IconArrowRightIcon
                        className={classNames(projectcss.all, sty.svg__ju7TJ)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame6947"}
                data-plasmic-override={overrides.frame6947}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame6947)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"formInput3"}
                  data-plasmic-override={overrides.formInput3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.formInput3)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"input3"}
                    data-plasmic-override={overrides.input3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.input3)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"iconInput3"}
                      data-plasmic-override={overrides.iconInput3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.iconInput3)}
                    >
                      {false ? (
                        <IconAddIcon
                          className={classNames(projectcss.all, sty.svg__ngrtD)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"yourEmail3"}
                        data-plasmic-override={overrides.yourEmail3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.yourEmail3
                        )}
                      >
                        {"University mail ID"}
                      </div>
                    </Stack__>
                    {false ? (
                      <IconArrowRightIcon
                        className={classNames(projectcss.all, sty.svg__tSjhH)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"formInput4"}
                  data-plasmic-override={overrides.formInput4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.formInput4)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"input4"}
                    data-plasmic-override={overrides.input4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.input4)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"iconInput4"}
                      data-plasmic-override={overrides.iconInput4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.iconInput4)}
                    >
                      {false ? (
                        <IconAddIcon
                          className={classNames(projectcss.all, sty.svg__aqJtV)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"yourEmail4"}
                        data-plasmic-override={overrides.yourEmail4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.yourEmail4
                        )}
                      >
                        {"Phone OTP"}
                      </div>
                    </Stack__>
                    {false ? (
                      <IconArrowRightIcon
                        className={classNames(projectcss.all, sty.svg__d45Db)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame6948"}
                data-plasmic-override={overrides.frame6948}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame6948)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"formInput5"}
                  data-plasmic-override={overrides.formInput5}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.formInput5)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"input5"}
                    data-plasmic-override={overrides.input5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.input5)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"iconInput5"}
                      data-plasmic-override={overrides.iconInput5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.iconInput5)}
                    >
                      {false ? (
                        <IconAddIcon
                          className={classNames(projectcss.all, sty.svg__cMg8L)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"yourEmail5"}
                        data-plasmic-override={overrides.yourEmail5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.yourEmail5
                        )}
                      >
                        {"Select Course"}
                      </div>
                    </Stack__>
                    {false ? (
                      <IconArrowRightIcon
                        className={classNames(projectcss.all, sty.svg__oylge)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"formInput6"}
                  data-plasmic-override={overrides.formInput6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.formInput6)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"input6"}
                    data-plasmic-override={overrides.input6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.input6)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"iconInput6"}
                      data-plasmic-override={overrides.iconInput6}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.iconInput6)}
                    >
                      {false ? (
                        <IconAddIcon
                          className={classNames(projectcss.all, sty.svg__b7L74)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"yourEmail6"}
                        data-plasmic-override={overrides.yourEmail6}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.yourEmail6
                        )}
                      >
                        {"Select Batch"}
                      </div>
                    </Stack__>
                    {false ? (
                      <IconArrowRightIcon
                        className={classNames(projectcss.all, sty.svg__ssl1)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame6949"}
                data-plasmic-override={overrides.frame6949}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame6949)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"formInput7"}
                  data-plasmic-override={overrides.formInput7}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.formInput7)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"input7"}
                    data-plasmic-override={overrides.input7}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.input7)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"iconInput7"}
                      data-plasmic-override={overrides.iconInput7}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.iconInput7)}
                    >
                      {false ? (
                        <IconAddIcon
                          className={classNames(projectcss.all, sty.svg__v4Agy)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"yourEmail7"}
                        data-plasmic-override={overrides.yourEmail7}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.yourEmail7
                        )}
                      >
                        {"Password"}
                      </div>
                    </Stack__>
                    {false ? (
                      <IconArrowRightIcon
                        className={classNames(projectcss.all, sty.svg__jReOb)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"formInput8"}
                  data-plasmic-override={overrides.formInput8}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.formInput8)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"input8"}
                    data-plasmic-override={overrides.input8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.input8)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"iconInput8"}
                      data-plasmic-override={overrides.iconInput8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.iconInput8)}
                    >
                      {false ? (
                        <IconAddIcon
                          className={classNames(projectcss.all, sty.svg__a1ZZa)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"yourEmail8"}
                        data-plasmic-override={overrides.yourEmail8}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.yourEmail8
                        )}
                      >
                        {"Confirm Password"}
                      </div>
                    </Stack__>
                    {false ? (
                      <IconArrowRightIcon
                        className={classNames(projectcss.all, sty.svg__jpDZu)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(projectcss.all, sty.button)}
              >
                {false ? (
                  <IconArrowRight2Icon
                    className={classNames(projectcss.all, sty.svg__jJfVk)}
                    role={"img"}
                  />
                ) : null}
                <div
                  data-plasmic-name={"getStarted"}
                  data-plasmic-override={overrides.getStarted}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.getStarted
                  )}
                >
                  {"Sign up"}
                </div>
                {false ? (
                  <IconArrowRight2Icon
                    className={classNames(projectcss.all, sty.svg__tFug)}
                    role={"img"}
                  />
                ) : null}
              </Stack__>
            </Stack__>
          </section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "signuIn",
    "title",
    "header",
    "content",
    "frame6946",
    "formInput",
    "reveal",
    "input",
    "iconInput",
    "yourEmail",
    "formInput2",
    "input2",
    "iconInput2",
    "yourEmail2",
    "frame6947",
    "formInput3",
    "input3",
    "iconInput3",
    "yourEmail3",
    "formInput4",
    "input4",
    "iconInput4",
    "yourEmail4",
    "frame6948",
    "formInput5",
    "input5",
    "iconInput5",
    "yourEmail5",
    "formInput6",
    "input6",
    "iconInput6",
    "yourEmail6",
    "frame6949",
    "formInput7",
    "input7",
    "iconInput7",
    "yourEmail7",
    "formInput8",
    "input8",
    "iconInput8",
    "yourEmail8",
    "button",
    "getStarted"
  ],

  section: [
    "section",
    "signuIn",
    "title",
    "header",
    "content",
    "frame6946",
    "formInput",
    "reveal",
    "input",
    "iconInput",
    "yourEmail",
    "formInput2",
    "input2",
    "iconInput2",
    "yourEmail2",
    "frame6947",
    "formInput3",
    "input3",
    "iconInput3",
    "yourEmail3",
    "formInput4",
    "input4",
    "iconInput4",
    "yourEmail4",
    "frame6948",
    "formInput5",
    "input5",
    "iconInput5",
    "yourEmail5",
    "formInput6",
    "input6",
    "iconInput6",
    "yourEmail6",
    "frame6949",
    "formInput7",
    "input7",
    "iconInput7",
    "yourEmail7",
    "formInput8",
    "input8",
    "iconInput8",
    "yourEmail8",
    "button",
    "getStarted"
  ],

  signuIn: [
    "signuIn",
    "title",
    "header",
    "content",
    "frame6946",
    "formInput",
    "reveal",
    "input",
    "iconInput",
    "yourEmail",
    "formInput2",
    "input2",
    "iconInput2",
    "yourEmail2",
    "frame6947",
    "formInput3",
    "input3",
    "iconInput3",
    "yourEmail3",
    "formInput4",
    "input4",
    "iconInput4",
    "yourEmail4",
    "frame6948",
    "formInput5",
    "input5",
    "iconInput5",
    "yourEmail5",
    "formInput6",
    "input6",
    "iconInput6",
    "yourEmail6",
    "frame6949",
    "formInput7",
    "input7",
    "iconInput7",
    "yourEmail7",
    "formInput8",
    "input8",
    "iconInput8",
    "yourEmail8",
    "button",
    "getStarted"
  ],

  title: ["title", "header", "content"],
  header: ["header", "content"],
  content: ["content"],
  frame6946: [
    "frame6946",
    "formInput",
    "reveal",
    "input",
    "iconInput",
    "yourEmail",
    "formInput2",
    "input2",
    "iconInput2",
    "yourEmail2"
  ],

  formInput: ["formInput", "reveal", "input", "iconInput", "yourEmail"],
  reveal: ["reveal", "input", "iconInput", "yourEmail"],
  input: ["input", "iconInput", "yourEmail"],
  iconInput: ["iconInput", "yourEmail"],
  yourEmail: ["yourEmail"],
  formInput2: ["formInput2", "input2", "iconInput2", "yourEmail2"],
  input2: ["input2", "iconInput2", "yourEmail2"],
  iconInput2: ["iconInput2", "yourEmail2"],
  yourEmail2: ["yourEmail2"],
  frame6947: [
    "frame6947",
    "formInput3",
    "input3",
    "iconInput3",
    "yourEmail3",
    "formInput4",
    "input4",
    "iconInput4",
    "yourEmail4"
  ],

  formInput3: ["formInput3", "input3", "iconInput3", "yourEmail3"],
  input3: ["input3", "iconInput3", "yourEmail3"],
  iconInput3: ["iconInput3", "yourEmail3"],
  yourEmail3: ["yourEmail3"],
  formInput4: ["formInput4", "input4", "iconInput4", "yourEmail4"],
  input4: ["input4", "iconInput4", "yourEmail4"],
  iconInput4: ["iconInput4", "yourEmail4"],
  yourEmail4: ["yourEmail4"],
  frame6948: [
    "frame6948",
    "formInput5",
    "input5",
    "iconInput5",
    "yourEmail5",
    "formInput6",
    "input6",
    "iconInput6",
    "yourEmail6"
  ],

  formInput5: ["formInput5", "input5", "iconInput5", "yourEmail5"],
  input5: ["input5", "iconInput5", "yourEmail5"],
  iconInput5: ["iconInput5", "yourEmail5"],
  yourEmail5: ["yourEmail5"],
  formInput6: ["formInput6", "input6", "iconInput6", "yourEmail6"],
  input6: ["input6", "iconInput6", "yourEmail6"],
  iconInput6: ["iconInput6", "yourEmail6"],
  yourEmail6: ["yourEmail6"],
  frame6949: [
    "frame6949",
    "formInput7",
    "input7",
    "iconInput7",
    "yourEmail7",
    "formInput8",
    "input8",
    "iconInput8",
    "yourEmail8"
  ],

  formInput7: ["formInput7", "input7", "iconInput7", "yourEmail7"],
  input7: ["input7", "iconInput7", "yourEmail7"],
  iconInput7: ["iconInput7", "yourEmail7"],
  yourEmail7: ["yourEmail7"],
  formInput8: ["formInput8", "input8", "iconInput8", "yourEmail8"],
  input8: ["input8", "iconInput8", "yourEmail8"],
  iconInput8: ["iconInput8", "yourEmail8"],
  yourEmail8: ["yourEmail8"],
  button: ["button", "getStarted"],
  getStarted: ["getStarted"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    signuIn: makeNodeComponent("signuIn"),
    title: makeNodeComponent("title"),
    header: makeNodeComponent("header"),
    content: makeNodeComponent("content"),
    frame6946: makeNodeComponent("frame6946"),
    formInput: makeNodeComponent("formInput"),
    reveal: makeNodeComponent("reveal"),
    input: makeNodeComponent("input"),
    iconInput: makeNodeComponent("iconInput"),
    yourEmail: makeNodeComponent("yourEmail"),
    formInput2: makeNodeComponent("formInput2"),
    input2: makeNodeComponent("input2"),
    iconInput2: makeNodeComponent("iconInput2"),
    yourEmail2: makeNodeComponent("yourEmail2"),
    frame6947: makeNodeComponent("frame6947"),
    formInput3: makeNodeComponent("formInput3"),
    input3: makeNodeComponent("input3"),
    iconInput3: makeNodeComponent("iconInput3"),
    yourEmail3: makeNodeComponent("yourEmail3"),
    formInput4: makeNodeComponent("formInput4"),
    input4: makeNodeComponent("input4"),
    iconInput4: makeNodeComponent("iconInput4"),
    yourEmail4: makeNodeComponent("yourEmail4"),
    frame6948: makeNodeComponent("frame6948"),
    formInput5: makeNodeComponent("formInput5"),
    input5: makeNodeComponent("input5"),
    iconInput5: makeNodeComponent("iconInput5"),
    yourEmail5: makeNodeComponent("yourEmail5"),
    formInput6: makeNodeComponent("formInput6"),
    input6: makeNodeComponent("input6"),
    iconInput6: makeNodeComponent("iconInput6"),
    yourEmail6: makeNodeComponent("yourEmail6"),
    frame6949: makeNodeComponent("frame6949"),
    formInput7: makeNodeComponent("formInput7"),
    input7: makeNodeComponent("input7"),
    iconInput7: makeNodeComponent("iconInput7"),
    yourEmail7: makeNodeComponent("yourEmail7"),
    formInput8: makeNodeComponent("formInput8"),
    input8: makeNodeComponent("input8"),
    iconInput8: makeNodeComponent("iconInput8"),
    yourEmail8: makeNodeComponent("yourEmail8"),
    button: makeNodeComponent("button"),
    getStarted: makeNodeComponent("getStarted"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
